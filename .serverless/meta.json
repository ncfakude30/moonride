{
  "/Users/nhlakaniphofakude/uber-clone-1": {
    "versionSfCore": null,
    "versionFramework": "4.2.4",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "moonrides",
            "provider": {
              "name": "aws",
              "runtime": "python3.9",
              "region": "us-east-1",
              "environment": {
                "TRIPS_TABLE": "TripsTable"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/TripsTable"
                }
              ],
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "GetRecentTripsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/moonrides-dev-getRecentTrips"
                    }
                  },
                  "SelectRideLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/moonrides-dev-selectRide"
                    }
                  },
                  "ProcessPaymentLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/moonrides-dev-processPayment"
                    }
                  },
                  "GetUserCurrencyLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/moonrides-dev-getUserCurrency"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "moonrides",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moonrides-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moonrides-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:PutItem",
                                  "dynamodb:GetItem",
                                  "dynamodb:Query"
                                ],
                                "Resource": "arn:aws:dynamodb:us-east-1:*:table/TripsTable"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "moonrides",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "PythonRequirementsLambdaLayer": {
                    "Type": "AWS::Lambda::LayerVersion",
                    "Properties": {
                      "Content": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip"
                      },
                      "LayerName": "moonrides-dev-python-requirements",
                      "Description": "Python requirements generated by serverless-python-requirements.",
                      "CompatibleRuntimes": [
                        "python3.9"
                      ]
                    }
                  },
                  "GetRecentTripsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/getRecentTrips.zip"
                      },
                      "Handler": "lambdas/rides.ride",
                      "Runtime": "python3.9",
                      "FunctionName": "moonrides-dev-getRecentTrips",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "TRIPS_TABLE": "TripsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetRecentTripsLogGroup"
                    ]
                  },
                  "SelectRideLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/selectRide.zip"
                      },
                      "Handler": "lambdas/rides/select-ride.handler",
                      "Runtime": "python3.9",
                      "FunctionName": "moonrides-dev-selectRide",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "TRIPS_TABLE": "TripsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SelectRideLogGroup"
                    ]
                  },
                  "ProcessPaymentLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/processPayment.zip"
                      },
                      "Handler": "lambdas/payment/process-payment.handler",
                      "Runtime": "python3.9",
                      "FunctionName": "moonrides-dev-processPayment",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "TRIPS_TABLE": "TripsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ProcessPaymentLogGroup"
                    ]
                  },
                  "GetUserCurrencyLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/getUserCurrency.zip"
                      },
                      "Handler": "lambdas/user/user.handler",
                      "Runtime": "python3.9",
                      "FunctionName": "moonrides-dev-getUserCurrency",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "TRIPS_TABLE": "TripsTable"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUserCurrencyLogGroup"
                    ]
                  },
                  "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SelectRideLambdaFunction"
                      },
                      "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
                    }
                  },
                  "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ProcessPaymentLambdaFunction"
                      },
                      "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
                    }
                  },
                  "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetRecentTripsLambdaFunction"
                      },
                      "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
                    }
                  },
                  "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUserCurrencyLambdaFunction"
                      },
                      "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-moonrides",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceRecentDashtrips": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "recent-trips",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceSelectDashride": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "select-ride",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceProcessDashpayment": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "process-payment",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceGetDashuserDashcurrency": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "get-user-currency",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodRecentDashtripsGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceRecentDashtrips"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetRecentTripsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetRecentTripsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodSelectDashridePost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceSelectDashride"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "SelectRideLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "SelectRideLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodProcessDashpaymentPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceProcessDashpayment"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "ProcessPaymentLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "ProcessPaymentLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodGetDashuserDashcurrencyGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceGetDashuserDashcurrency"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserCurrencyLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserCurrencyLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1725135364755": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodRecentDashtripsGet",
                      "ApiGatewayMethodSelectDashridePost",
                      "ApiGatewayMethodProcessDashpaymentPost",
                      "ApiGatewayMethodGetDashuserDashcurrencyGet"
                    ]
                  },
                  "GetRecentTripsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetRecentTripsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "SelectRideLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SelectRideLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "ProcessPaymentLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "ProcessPaymentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUserCurrencyLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUserCurrencyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "RecentTripsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "TripsTable",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "tripDate",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "tripDate",
                          "KeyType": "RANGE"
                        }
                      ],
                      "ProvisionedThroughput": {
                        "ReadCapacityUnits": 5,
                        "WriteCapacityUnits": 5
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "PythonRequirementsLambdaLayerQualifiedArn": {
                    "Description": "Current Lambda layer version",
                    "Value": {
                      "Ref": "PythonRequirementsLambdaLayer"
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerQualifiedArn"
                    }
                  },
                  "PythonRequirementsLambdaLayerHash": {
                    "Description": "Current Lambda layer hash",
                    "Value": "9a7d5715b69778d9d2c419f1483bf8ceae94bec0",
                    "Export": {
                      "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerHash"
                    }
                  },
                  "PythonRequirementsLambdaLayerS3Key": {
                    "Description": "Current Lambda layer S3Key",
                    "Value": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip",
                    "Export": {
                      "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerS3Key"
                    }
                  },
                  "SelectRideLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0"
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-SelectRideLambdaFunctionQualifiedArn"
                    }
                  },
                  "ProcessPaymentLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I"
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-ProcessPaymentLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetRecentTripsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4"
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-GetRecentTripsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetUserCurrencyLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw"
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-GetUserCurrencyLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-moonrides-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getRecentTrips": {
                "handler": "lambdas/rides.ride",
                "events": [
                  {
                    "http": {
                      "path": "recent-trips",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "moonrides-dev-getRecentTrips",
                "module": ".",
                "package": {
                  "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/getRecentTrips.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4"
              },
              "selectRide": {
                "handler": "lambdas/rides/select-ride.handler",
                "events": [
                  {
                    "http": {
                      "path": "select-ride",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "moonrides-dev-selectRide",
                "module": ".",
                "package": {
                  "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/selectRide.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0"
              },
              "processPayment": {
                "handler": "lambdas/payment/process-payment.handler",
                "events": [
                  {
                    "http": {
                      "path": "process-payment",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "moonrides-dev-processPayment",
                "module": ".",
                "package": {
                  "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/processPayment.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I"
              },
              "getUserCurrency": {
                "handler": "lambdas/user/user.handler",
                "events": [
                  {
                    "http": {
                      "path": "get-user-currency",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "moonrides-dev-getUserCurrency",
                "module": ".",
                "package": {
                  "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/getUserCurrency.zip"
                },
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw"
              }
            },
            "resources": {
              "Resources": {
                "RecentTripsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "TripsTable",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      },
                      {
                        "AttributeName": "tripDate",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "tripDate",
                        "KeyType": "RANGE"
                      }
                    ],
                    "ProvisionedThroughput": {
                      "ReadCapacityUnits": 5,
                      "WriteCapacityUnits": 5
                    }
                  }
                }
              },
              "Outputs": {}
            },
            "plugins": [
              "serverless-python-requirements"
            ],
            "custom": {
              "pythonRequirements": {
                "dockerizePip": true,
                "layer": true,
                "slim": true
              }
            },
            "package": {
              "individually": true,
              "exclude": [
                "node_modules/**",
                ".serverless/**",
                ".webpack/**"
              ],
              "artifactsS3KeyDirname": "serverless/moonrides/dev/code-artifacts",
              "artifactDirectoryName": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z"
            }
          },
          "configFileDirPath": "/Users/nhlakaniphofakude/uber-clone-1",
          "config": {
            "type": "self"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/nhlakaniphofakude/uber-clone-1",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "moonrides",
      "provider": {
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-east-1",
        "environment": {
          "TRIPS_TABLE": "TripsTable"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:Query"
            ],
            "Resource": "arn:aws:dynamodb:us-east-1:*:table/TripsTable"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "GetRecentTripsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/moonrides-dev-getRecentTrips"
              }
            },
            "SelectRideLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/moonrides-dev-selectRide"
              }
            },
            "ProcessPaymentLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/moonrides-dev-processPayment"
              }
            },
            "GetUserCurrencyLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/moonrides-dev-getUserCurrency"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "moonrides",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moonrides-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moonrides-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:Query"
                          ],
                          "Resource": "arn:aws:dynamodb:us-east-1:*:table/TripsTable"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "moonrides",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "PythonRequirementsLambdaLayer": {
              "Type": "AWS::Lambda::LayerVersion",
              "Properties": {
                "Content": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip"
                },
                "LayerName": "moonrides-dev-python-requirements",
                "Description": "Python requirements generated by serverless-python-requirements.",
                "CompatibleRuntimes": [
                  "python3.9"
                ]
              }
            },
            "GetRecentTripsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/getRecentTrips.zip"
                },
                "Handler": "lambdas/rides.ride",
                "Runtime": "python3.9",
                "FunctionName": "moonrides-dev-getRecentTrips",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TRIPS_TABLE": "TripsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetRecentTripsLogGroup"
              ]
            },
            "SelectRideLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/selectRide.zip"
                },
                "Handler": "lambdas/rides/select-ride.handler",
                "Runtime": "python3.9",
                "FunctionName": "moonrides-dev-selectRide",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TRIPS_TABLE": "TripsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SelectRideLogGroup"
              ]
            },
            "ProcessPaymentLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/processPayment.zip"
                },
                "Handler": "lambdas/payment/process-payment.handler",
                "Runtime": "python3.9",
                "FunctionName": "moonrides-dev-processPayment",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TRIPS_TABLE": "TripsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ProcessPaymentLogGroup"
              ]
            },
            "GetUserCurrencyLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/getUserCurrency.zip"
                },
                "Handler": "lambdas/user/user.handler",
                "Runtime": "python3.9",
                "FunctionName": "moonrides-dev-getUserCurrency",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "TRIPS_TABLE": "TripsTable"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserCurrencyLogGroup"
              ]
            },
            "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SelectRideLambdaFunction"
                },
                "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
              }
            },
            "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ProcessPaymentLambdaFunction"
                },
                "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
              }
            },
            "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetRecentTripsLambdaFunction"
                },
                "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
              }
            },
            "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserCurrencyLambdaFunction"
                },
                "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-moonrides",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceRecentDashtrips": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "recent-trips",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSelectDashride": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "select-ride",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceProcessDashpayment": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "process-payment",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetDashuserDashcurrency": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get-user-currency",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRecentDashtripsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRecentDashtrips"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetRecentTripsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetRecentTripsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSelectDashridePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSelectDashride"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SelectRideLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SelectRideLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodProcessDashpaymentPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProcessDashpayment"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ProcessPaymentLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ProcessPaymentLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetDashuserDashcurrencyGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetDashuserDashcurrency"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserCurrencyLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserCurrencyLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1725135364755": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodRecentDashtripsGet",
                "ApiGatewayMethodSelectDashridePost",
                "ApiGatewayMethodProcessDashpaymentPost",
                "ApiGatewayMethodGetDashuserDashcurrencyGet"
              ]
            },
            "GetRecentTripsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetRecentTripsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SelectRideLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SelectRideLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ProcessPaymentLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProcessPaymentLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserCurrencyLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserCurrencyLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RecentTripsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "TripsTable",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "tripDate",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "tripDate",
                    "KeyType": "RANGE"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-moonrides-dev-ServerlessDeploymentBucketName"
              }
            },
            "PythonRequirementsLambdaLayerQualifiedArn": {
              "Description": "Current Lambda layer version",
              "Value": {
                "Ref": "PythonRequirementsLambdaLayer"
              },
              "Export": {
                "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerQualifiedArn"
              }
            },
            "PythonRequirementsLambdaLayerHash": {
              "Description": "Current Lambda layer hash",
              "Value": "9a7d5715b69778d9d2c419f1483bf8ceae94bec0",
              "Export": {
                "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerHash"
              }
            },
            "PythonRequirementsLambdaLayerS3Key": {
              "Description": "Current Lambda layer S3Key",
              "Value": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip",
              "Export": {
                "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerS3Key"
              }
            },
            "SelectRideLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0"
              },
              "Export": {
                "Name": "sls-moonrides-dev-SelectRideLambdaFunctionQualifiedArn"
              }
            },
            "ProcessPaymentLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I"
              },
              "Export": {
                "Name": "sls-moonrides-dev-ProcessPaymentLambdaFunctionQualifiedArn"
              }
            },
            "GetRecentTripsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4"
              },
              "Export": {
                "Name": "sls-moonrides-dev-GetRecentTripsLambdaFunctionQualifiedArn"
              }
            },
            "GetUserCurrencyLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw"
              },
              "Export": {
                "Name": "sls-moonrides-dev-GetUserCurrencyLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-moonrides-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getRecentTrips": {
          "handler": "lambdas/rides.ride",
          "events": [
            {
              "http": {
                "path": "recent-trips",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "moonrides-dev-getRecentTrips",
          "module": ".",
          "package": {
            "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/getRecentTrips.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4"
        },
        "selectRide": {
          "handler": "lambdas/rides/select-ride.handler",
          "events": [
            {
              "http": {
                "path": "select-ride",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "moonrides-dev-selectRide",
          "module": ".",
          "package": {
            "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/selectRide.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0"
        },
        "processPayment": {
          "handler": "lambdas/payment/process-payment.handler",
          "events": [
            {
              "http": {
                "path": "process-payment",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "moonrides-dev-processPayment",
          "module": ".",
          "package": {
            "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/processPayment.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I"
        },
        "getUserCurrency": {
          "handler": "lambdas/user/user.handler",
          "events": [
            {
              "http": {
                "path": "get-user-currency",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "moonrides-dev-getUserCurrency",
          "module": ".",
          "package": {
            "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/getUserCurrency.zip"
          },
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw"
        }
      },
      "resources": {
        "Resources": {
          "RecentTripsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TripsTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tripDate",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "tripDate",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          }
        },
        "Outputs": {}
      },
      "plugins": [
        "serverless-python-requirements"
      ],
      "custom": {
        "pythonRequirements": {
          "dockerizePip": true,
          "layer": true,
          "slim": true
        }
      },
      "package": {
        "individually": true,
        "exclude": [
          "node_modules/**",
          ".serverless/**",
          ".webpack/**"
        ],
        "artifactsS3KeyDirname": "serverless/moonrides/dev/code-artifacts",
        "artifactDirectoryName": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z"
      }
    },
    "serviceRawFile": "service: moonrides\n\nprovider:\n  name: aws\n  runtime: python3.9\n  region: us-east-1\n  environment:\n    TRIPS_TABLE: TripsTable\n  iamRoleStatements:\n    - Effect: \"Allow\"\n      Action:\n        - dynamodb:PutItem\n        - dynamodb:GetItem\n        - dynamodb:Query\n      Resource:\n        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}\n\nfunctions:\n  # Lambda for getting recent trips\n  getRecentTrips:\n    handler: lambdas/rides.ride\n    events:\n      - http:\n          path: recent-trips\n          method: get\n\n  # Lambda for selecting a ride\n  selectRide:\n    handler: lambdas/rides/select-ride.handler\n    events:\n      - http:\n          path: select-ride\n          method: post\n\n  # Lambda for processing payment\n  processPayment:\n    handler: lambdas/payment/process-payment.handler\n    events:\n      - http:\n          path: process-payment\n          method: post\n\n  # Lambda for getting user currency\n  getUserCurrency:\n    handler: lambdas/user/user.handler\n    events:\n      - http:\n          path: get-user-currency\n          method: get\n\nresources:\n  Resources:\n    RecentTripsTable:\n      Type: \"AWS::DynamoDB::Table\"\n      Properties:\n        TableName: ${self:provider.environment.TRIPS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n          - AttributeName: tripDate\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: tripDate\n            KeyType: RANGE\n        ProvisionedThroughput:\n          ReadCapacityUnits: 5\n          WriteCapacityUnits: 5\n\nplugins:\n  - serverless-python-requirements\n\ncustom:\n  pythonRequirements:\n    dockerizePip: true\n    layer: true\n    slim: true\n\npackage:\n  individually: true\n  exclude:\n    - node_modules/**\n    - .serverless/**\n    - .webpack/**\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "2f9f1ce9026fa956d47744d51c6edff9",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "e554cfcb-8c1f-4774-818a-38c558e40b4c",
    "orgName": "ncfcorp",
    "userId": "MvV24LDdqSgNgpylMz",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "ncfcorp",
    "subscription": null,
    "userEmail": "admin@ncfcorporations.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "535002855362",
    "projectType": "framework",
    "versionSf": "4.2.4",
    "serviceProviderAwsCfStackName": "moonrides-dev",
    "integrations": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:535002855362:stack/moonrides-dev/a4b44fb0-67d5-11ef-8c43-0afff4835031",
    "serviceProviderAwsCfStackCreated": "2024-08-31T20:14:36.132Z",
    "serviceProviderAwsCfStackUpdated": "2024-08-31T20:20:45.566Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "PythonRequirementsLambdaLayerS3Key",
        "OutputValue": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip",
        "Description": "Current Lambda layer S3Key",
        "ExportName": "sls-moonrides-dev-PythonRequirementsLambdaLayerS3Key"
      },
      {
        "OutputKey": "SelectRideLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:535002855362:function:moonrides-dev-selectRide:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-moonrides-dev-SelectRideLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetRecentTripsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:535002855362:function:moonrides-dev-getRecentTrips:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-moonrides-dev-GetRecentTripsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserCurrencyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:535002855362:function:moonrides-dev-getUserCurrency:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-moonrides-dev-GetUserCurrencyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PythonRequirementsLambdaLayerQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:535002855362:layer:moonrides-dev-python-requirements:1",
        "Description": "Current Lambda layer version",
        "ExportName": "sls-moonrides-dev-PythonRequirementsLambdaLayerQualifiedArn"
      },
      {
        "OutputKey": "ProcessPaymentLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:535002855362:function:moonrides-dev-processPayment:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-moonrides-dev-ProcessPaymentLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PythonRequirementsLambdaLayerHash",
        "OutputValue": "9a7d5715b69778d9d2c419f1483bf8ceae94bec0",
        "Description": "Current Lambda layer hash",
        "ExportName": "sls-moonrides-dev-PythonRequirementsLambdaLayerHash"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://t8qeu3kbc7.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-moonrides-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "moonrides-dev-serverlessdeploymentbucket-z88gcjqer3rn",
        "ExportName": "sls-moonrides-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}