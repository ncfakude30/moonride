{
  "service": {
    "service": "moonrides",
    "serviceObject": {
      "name": "moonrides"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.9",
      "region": "us-east-1",
      "environment": {
        "TRIPS_TABLE": "TripsTable"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:Query"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:*:table/TripsTable"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetRecentTripsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/moonrides-dev-getRecentTrips"
            }
          },
          "SelectRideLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/moonrides-dev-selectRide"
            }
          },
          "ProcessPaymentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/moonrides-dev-processPayment"
            }
          },
          "GetUserCurrencyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/moonrides-dev-getUserCurrency"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "moonrides",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moonrides-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moonrides-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "moonrides",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PythonRequirementsLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip"
              },
              "LayerName": "moonrides-dev-python-requirements",
              "Description": "Python requirements generated by serverless-python-requirements.",
              "CompatibleRuntimes": [
                "python3.9"
              ]
            }
          },
          "GetRecentTripsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/getRecentTrips.zip"
              },
              "Handler": "lambdas/rides.ride",
              "Runtime": "python3.9",
              "FunctionName": "moonrides-dev-getRecentTrips",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TRIPS_TABLE": "TripsTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRecentTripsLogGroup"
            ]
          },
          "SelectRideLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/selectRide.zip"
              },
              "Handler": "lambdas/rides/select-ride.handler",
              "Runtime": "python3.9",
              "FunctionName": "moonrides-dev-selectRide",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TRIPS_TABLE": "TripsTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SelectRideLogGroup"
            ]
          },
          "ProcessPaymentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/processPayment.zip"
              },
              "Handler": "lambdas/payment/process-payment.handler",
              "Runtime": "python3.9",
              "FunctionName": "moonrides-dev-processPayment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TRIPS_TABLE": "TripsTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProcessPaymentLogGroup"
            ]
          },
          "GetUserCurrencyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/getUserCurrency.zip"
              },
              "Handler": "lambdas/user/user.handler",
              "Runtime": "python3.9",
              "FunctionName": "moonrides-dev-getUserCurrency",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TRIPS_TABLE": "TripsTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserCurrencyLogGroup"
            ]
          },
          "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SelectRideLambdaFunction"
              },
              "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
            }
          },
          "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessPaymentLambdaFunction"
              },
              "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
            }
          },
          "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRecentTripsLambdaFunction"
              },
              "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
            }
          },
          "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserCurrencyLambdaFunction"
              },
              "CodeSha256": "/SXY7pMtXJzsb1OOsyTb6PApeSCdFI0IS3ll2JTpesM="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-moonrides",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRecentDashtrips": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "recent-trips",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSelectDashride": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "select-ride",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProcessDashpayment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "process-payment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashuserDashcurrency": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-user-currency",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRecentDashtripsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecentDashtrips"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRecentTripsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetRecentTripsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSelectDashridePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSelectDashride"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SelectRideLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SelectRideLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProcessDashpaymentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProcessDashpayment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProcessPaymentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ProcessPaymentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashuserDashcurrencyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashuserDashcurrency"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserCurrencyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserCurrencyLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1725135364755": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRecentDashtripsGet",
              "ApiGatewayMethodSelectDashridePost",
              "ApiGatewayMethodProcessDashpaymentPost",
              "ApiGatewayMethodGetDashuserDashcurrencyGet"
            ]
          },
          "GetRecentTripsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRecentTripsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SelectRideLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SelectRideLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProcessPaymentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessPaymentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserCurrencyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserCurrencyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RecentTripsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TripsTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tripDate",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "tripDate",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-moonrides-dev-ServerlessDeploymentBucketName"
            }
          },
          "PythonRequirementsLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "PythonRequirementsLambdaLayer"
            },
            "Export": {
              "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerQualifiedArn"
            }
          },
          "PythonRequirementsLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "9a7d5715b69778d9d2c419f1483bf8ceae94bec0",
            "Export": {
              "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerHash"
            }
          },
          "PythonRequirementsLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z/pythonRequirements.zip",
            "Export": {
              "Name": "sls-moonrides-dev-PythonRequirementsLambdaLayerS3Key"
            }
          },
          "SelectRideLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0"
            },
            "Export": {
              "Name": "sls-moonrides-dev-SelectRideLambdaFunctionQualifiedArn"
            }
          },
          "ProcessPaymentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I"
            },
            "Export": {
              "Name": "sls-moonrides-dev-ProcessPaymentLambdaFunctionQualifiedArn"
            }
          },
          "GetRecentTripsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4"
            },
            "Export": {
              "Name": "sls-moonrides-dev-GetRecentTripsLambdaFunctionQualifiedArn"
            }
          },
          "GetUserCurrencyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw"
            },
            "Export": {
              "Name": "sls-moonrides-dev-GetUserCurrencyLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-moonrides-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "dockerizePip": true,
        "layer": true,
        "slim": true
      }
    },
    "plugins": [
      "serverless-python-requirements"
    ],
    "pluginsData": {},
    "functions": {
      "getRecentTrips": {
        "handler": "lambdas/rides.ride",
        "events": [
          {
            "http": {
              "path": "recent-trips",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "moonrides-dev-getRecentTrips",
        "module": ".",
        "package": {
          "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/getRecentTrips.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "GetRecentTripsLambdaVersionsY7kxkRCMrUno9Li5BZNO7H9kK5sm2KT3izdkeisS4"
      },
      "selectRide": {
        "handler": "lambdas/rides/select-ride.handler",
        "events": [
          {
            "http": {
              "path": "select-ride",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "moonrides-dev-selectRide",
        "module": ".",
        "package": {
          "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/selectRide.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "SelectRideLambdaVersion2Zly1ZB8YY2zH7r2SKcsBPdj48oQt9ECMz1LH2axn0"
      },
      "processPayment": {
        "handler": "lambdas/payment/process-payment.handler",
        "events": [
          {
            "http": {
              "path": "process-payment",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "moonrides-dev-processPayment",
        "module": ".",
        "package": {
          "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/processPayment.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "ProcessPaymentLambdaVersionCJp7Tt7dkgt03X2g2hhcLG0nyIiiMw9Yj9JT19GL5I"
      },
      "getUserCurrency": {
        "handler": "lambdas/user/user.handler",
        "events": [
          {
            "http": {
              "path": "get-user-currency",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "moonrides-dev-getUserCurrency",
        "module": ".",
        "package": {
          "artifact": "/Users/nhlakaniphofakude/uber-clone-1/.serverless/getUserCurrency.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "GetUserCurrencyLambdaVersion6bqxr58sxRfZBcjpAhYtlbUtLaJBobKiNg1ITUe1qnw"
      }
    },
    "resources": {
      "Resources": {
        "RecentTripsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "TripsTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "tripDate",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "tripDate",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "moonrides",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "individually": true,
        "exclude": [
          "node_modules/**",
          ".serverless/**",
          ".webpack/**"
        ],
        "artifactsS3KeyDirname": "serverless/moonrides/dev/code-artifacts",
        "artifactDirectoryName": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {
      "pythonRequirements": {
        "artifact": ".serverless/pythonRequirements.zip",
        "name": "moonrides-dev-python-requirements",
        "description": "Python requirements generated by serverless-python-requirements.",
        "compatibleRuntimes": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PythonRequirementsLambdaLayer\"][\"Properties\"][\"CompatibleRuntimes\"]"
        },
        "package": {}
      }
    }
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/moonrides/dev/1725135370926-2024-08-31T20:16:10.926Z",
    "artifact": ""
  }
}