org: ncfcorp
app: moon-rides
service: moonrides

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    TRIPS_TABLE: TripsTable
    USERS_TABLE: UsersTable
    CONNECTIONS_TABLE: ConnectionsTable
    MESSAGES_TABLE: MessagesTable
    WEBSOCKET_ENDPOINT: !Sub 'wss://${WebSocketApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/'

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}
    - Effect: "Allow"
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: "Allow"
      Action:
        - apigateway:POST
      Resource: "*"

functions:
  login:
    handler: user/login.handler
    events:
      - http:
          path: login
          method: post
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getUser:
    handler: user/getUser.handler
    events:
      - http:
          path: user/{userId}
          method: get
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
  
  getRecentTrips:
    handler: ride/ride.handler
    events:
      - http:
          path: trips
          method: get
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  requestRide:
    handler: ride/request.handler
    events:
      - http:
          path: request
          method: post
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  processPayment:
    handler: process_payment.handler
    events:
      - http:
          path: payment
          method: post
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  connect:
    handler: websocket/connect.handler
    events:
      - websocket:
          route: $connect

  disconnect:
    handler: websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  message:
    handler: websocket/message.handler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    TripsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.TRIPS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tripDate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tripDate
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ConnectionsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MessagesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    WebSocketApi:
      Type: 'AWS::ApiGatewayV2::Api'
      Properties:
        Name: WebSocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: '$request.body.action'
