org: ncfcorp
app: moon-rides
service: moonrides

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    TRIPS_TABLE: TripsTable
    USERS_TABLE: UsersTable
    CONNECTIONS_TABLE: ConnectionsTable_v3
    MESSAGES_TABLE: MessagesTable
    DRIVERS_TABLE: DriversTable
    PYTHONPATH: '/var/task:${PYTHONPATH}'

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource:
        - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.TRIPS_TABLE}
        - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.USERS_TABLE}
        - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.CONNECTIONS_TABLE}
        - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.MESSAGES_TABLE}
        - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.DRIVERS_TABLE}
    - Effect: "Allow"
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: "Allow"
      Action:
        - apigateway:POST
        - execute-api:Invoke
      Resource:
        - !Sub arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:*

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    zip: true
    layer: true
    include:
      - .serverless/**
      - venv
      - .venv

functions:
  login:
    handler: user/login.handler
    events:
      - http:
          path: login
          method: post
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getUser:
    handler: user/getUser.handler
    events:
      - http:
          path: user/{userId}
          method: get
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getRecentTrips:
    handler: ride/ride.handler
    events:
      - http:
          path: trips
          method: get
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  requestRide:
    handler: ride/request.handler
    events:
      - http:
          path: request
          method: post
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  processPayment:
    handler: process_payment.handler
    events:
      - http:
          path: payment
          method: post
          cors:
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  connect:
    handler: websocket/connect.handler
    events:
      - websocket:
          route: $connect

  disconnect:
    handler: websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  message:
    handler: websocket/message.handler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    TripsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.TRIPS_TABLE}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: S
          - AttributeName: 'tripDate'
            AttributeType: S
          - AttributeName: 'tripId'
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tripDate
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: TripIdIndex
            KeySchema:
              - AttributeName: tripId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: S
          - AttributeName: 'isOnline'
            AttributeType: B
        KeySchema:
          - AttributeName: 'userId'
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: IsOnlineIndex
            KeySchema:
              - AttributeName: 'isOnline'
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ConnectionsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: 'userId'
            AttributeType: S
          - AttributeName: 'connectionId'
            AttributeType: S
        KeySchema:
          - AttributeName: 'userId'
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIdIndex
            KeySchema:
              - AttributeName: 'connectionId'
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    MessagesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: 'messageId'
            AttributeType: S
          - AttributeName: 'senderId'
            AttributeType: S
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: SenderIndex
            KeySchema:
              - AttributeName: 'senderId'
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    DriversTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.DRIVERS_TABLE}
        AttributeDefinitions:
          - AttributeName: geohash
            AttributeType: S
        KeySchema:
          - AttributeName: geohash
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    WebSocketApi:
      Type: 'AWS::ApiGatewayV2::Api'
      Properties:
        Name: WebSocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: '$request.body.action'

    WebSocketApiStage:
      Type: 'AWS::ApiGatewayV2::Stage'
      Properties:
        ApiId: !Ref WebSocketApi
        StageName: '${self:provider.stage}'
        AutoDeploy: true

    WebSocketApiRouteConnect:
      Type: 'AWS::ApiGatewayV2::Route'
      Properties:
        ApiId: !Ref WebSocketApi
        RouteKey: '$connect'
        AuthorizationType: NONE
        Target: !Sub 'integrations/${WebSocketApiIntegrationConnect}'

    WebSocketApiRouteDisconnect:
      Type: 'AWS::ApiGatewayV2::Route'
      Properties:
        ApiId: !Ref WebSocketApi
        RouteKey: '$disconnect'
        AuthorizationType: NONE
        Target: !Sub 'integrations/${WebSocketApiIntegrationDisconnect}'

    WebSocketApiRouteMessage:
      Type: 'AWS::ApiGatewayV2::Route'
      Properties:
        ApiId: !Ref WebSocketApi
        RouteKey: '$default'
        AuthorizationType: NONE
        Target: !Sub 'integrations/${WebSocketApiIntegrationMessage}'

    WebSocketApiDeployment:
      Type: 'AWS::ApiGatewayV2::Deployment'
      DependsOn:
        - WebSocketApiRouteConnect
        - WebSocketApiRouteDisconnect
        - WebSocketApiRouteMessage
      Properties:
        ApiId: !Ref WebSocketApi

    WebSocketApiIntegrationConnect:
      Type: 'AWS::ApiGatewayV2::Integration'
      Properties:
        ApiId: !Ref WebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri: !Sub 'arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${ConnectLambdaFunction.Arn}/invocations'
        PayloadFormatVersion: '1.0'

    WebSocketApiIntegrationDisconnect:
      Type: 'AWS::ApiGatewayV2::Integration'
      Properties:
        ApiId: !Ref WebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri: !Sub 'arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${DisconnectLambdaFunction.Arn}/invocations'
        PayloadFormatVersion: '1.0'

    WebSocketApiIntegrationMessage:
      Type: 'AWS::ApiGatewayV2::Integration'
      Properties:
        ApiId: !Ref WebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri: !Sub 'arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${MessageLambdaFunction.Arn}/invocations'
        PayloadFormatVersion: '1.0'

    WebSocketApiPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref ConnectLambdaFunction
        Principal: 'apigateway.amazonaws.com'
        SourceArn: !Sub 'arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${WebSocketApi}/*/$connect'

    WebSocketApiPermissionDisconnect:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref DisconnectLambdaFunction
        Principal: 'apigateway.amazonaws.com'
        SourceArn: !Sub 'arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect'

    WebSocketApiPermissionMessage:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref MessageLambdaFunction
        Principal: 'apigateway.amazonaws.com'
        SourceArn: !Sub 'arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${WebSocketApi}/*/$default'

